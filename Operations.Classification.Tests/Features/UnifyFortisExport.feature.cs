// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Operations.Classification.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Unify Fortis Operations Export details")]
    public partial class UnifyFortisOperationsExportDetailsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "UnifyFortisExport.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Unify Fortis Operations Export details", "\tIn order to classify my personal operations,\r\n\tI want a more structure operation" +
                    " detail for my fortis transaction exports", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("parse \'BankTransfert\'")]
        public virtual void ParseBankTransfert()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("parse \'BankTransfert\'", ((string[])(null)));
#line 5
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "OperationId",
                        "Note"});
            table1.AddRow(new string[] {
                        "VE1",
                        "PROXIMUS MOBILE BE31435411161155BIC KREDBEBB    VIA MOBILE BANKING COMMUNICATION " +
                            ": 285293318632 EXECUTE LE 05-02 DATE VALEUR : 05/02/2017"});
            table1.AddRow(new string[] {
                        "VE2",
                        "GEVELCO BE05 3701 2392 6075  BIC BBRUBEBBCOMMUNICATION: LOYER RUE DE PASCALE 15 -" +
                            " ETAGE 1  BR AYE - BACQUELAINE DATE VALEUR : 01/02/2017"});
            table1.AddRow(new string[] {
                        "VE3",
                        "PARTENAMUT BE40310083000663BIC BBRUBEBB    VIA WEB BANKING COMMUNICATION : 170010" +
                            "267366 DATE VALEUR : 23/01/2017"});
            table1.AddRow(new string[] {
                        "VE4",
                        "SELLIGENT S.A. AVENUE DE FINLANDE, 21420        BRAINE-L\'ALLEU BE02 3600 9651 844" +
                            "0  BIC BBRUBEBB REFERENCE DONNEUR D\'ORDRE : 1CS0125-01-0000245-1701310102822878 " +
                            "COMMUNICATION : /A/ 1CS0125-01-0000245 DATE VALEUR : 13/01/2017"});
            table1.AddRow(new string[] {
                        "VE5",
                        "BACQUELAINE SYLVIE RUE DU DUC 231150     WOLUWE-SAINT-PIERRE BE70 0013 5026 1925 " +
                            " BIC GEBABEBB PAS DE COMMUNICATION DATE VALEUR : 18/01/2017"});
            table1.AddRow(new string[] {
                        "VE6",
                        "COLINE BRAYE BE89750668924185BIC AXABBE22    VIA WEB BANKING COMMUNICATION : ANNI" +
                            "F PAPA DATE VALEUR : 05/12/2016"});
#line 6
 testRunner.Given("I have read the following account operations from source of kind FortisCsvExport", ((string)(null)), table1, "Given ");
#line 15
 testRunner.When("I apply the cleanup transformation on unified operations", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "OperationId",
                        "ThirdParty",
                        "City",
                        "Address",
                        "PatternName",
                        "Communication",
                        "IBAN",
                        "BIC",
                        "ThirdPartyOperationRef"});
            table2.AddRow(new string[] {
                        "VE1",
                        "PROXIMUS MOBILE",
                        "",
                        "",
                        "BankTransfert",
                        "",
                        "BE31435411161155",
                        "KREDBEBB",
                        ""});
            table2.AddRow(new string[] {
                        "VE2",
                        "GEVELCO",
                        "",
                        "",
                        "BankTransfert",
                        "LOYER RUE DE PASCALE 15 - ETAGE 1  BR AYE - BACQUELAINE",
                        "BE05 3701 2392 6075",
                        "BBRUBEBB",
                        ""});
            table2.AddRow(new string[] {
                        "VE3",
                        "PARTENAMUT",
                        "",
                        "",
                        "BankTransfert",
                        "",
                        "BE40310083000663",
                        "BBRUBEBB",
                        ""});
            table2.AddRow(new string[] {
                        "VE4",
                        "SELLIGENT S.A.",
                        "BRAINE-L\'ALLEU",
                        "AVENUE DE FINLANDE, 21420",
                        "BankTransfert",
                        ": /A/ 1CS0125-01-0000245",
                        "BE02 3600 9651 8440",
                        "BBRUBEBB",
                        "1CS0125-01-0000245-1701310102822878"});
            table2.AddRow(new string[] {
                        "VE5",
                        "BACQUELAINE SYLVIE",
                        "WOLUWE-SAINT-PIERRE",
                        "RUE DU DUC 231150",
                        "BankTransfert",
                        "",
                        "BE70 0013 5026 1925",
                        "GEBABEBB",
                        ""});
            table2.AddRow(new string[] {
                        "VE6",
                        "COLINE BRAYE",
                        "",
                        "",
                        "BankTransfert",
                        "",
                        "BE89750668924185",
                        "AXABBE22",
                        ""});
#line 17
 testRunner.Then("the operations data is", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("parse \'CartPayment\'")]
        public virtual void ParseCartPayment()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("parse \'CartPayment\'", ((string[])(null)));
#line 26
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "OperationId",
                        "Note"});
            table3.AddRow(new string[] {
                        "Ref1",
                        "AVEC LA CARTE 6703 04XX XXXX X315 7 CARREFOUR EXPR   1000 BRUS.07-02-2017 EXECUTE" +
                            " LE 07-02 DATE VALEUR : 07/02/2017"});
#line 27
    testRunner.Given("I have read the following account operations from source of kind FortisCsvExport", ((string)(null)), table3, "Given ");
#line 31
 testRunner.When("I apply the cleanup transformation on unified operations", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "OperationId",
                        "ThirdParty",
                        "City",
                        "PatternName"});
            table4.AddRow(new string[] {
                        "Ref1",
                        "CARREFOUR EXPR   1000",
                        "BRUS.",
                        "CartPayment"});
#line 33
    testRunner.Then("the operations data is", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("parse \'Domiciliation\'")]
        public virtual void ParseDomiciliation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("parse \'Domiciliation\'", ((string[])(null)));
#line 38
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "OperationId",
                        "Note"});
            table5.AddRow(new string[] {
                        "Ref1",
                        "PAYPAL EUROPE S.A.R.L. ET CIE S.C.A NUMERO DE MANDAT :43FJ224QUR62Q REFERENCE : 1" +
                            "000265758596 PAYPAL COMMUNICATION : 1000265758596 PAYPAL DATE VALEUR : 02/12/201" +
                            "6"});
#line 39
    testRunner.Given("I have read the following account operations from source of kind FortisCsvExport", ((string)(null)), table5, "Given ");
#line 43
 testRunner.When("I apply the cleanup transformation on unified operations", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "OperationId",
                        "ThirdParty",
                        "PatternName",
                        "Mandat",
                        "ThirdPartyOperationRef",
                        "Communication"});
            table6.AddRow(new string[] {
                        "Ref1",
                        "PAYPAL EUROPE S.A.R.L. ET CIE S.C.A",
                        "Domiciliation",
                        "43FJ224QUR62Q",
                        "1000265758596 PAYPAL",
                        "1000265758596 PAYPAL"});
#line 45
    testRunner.Then("the operations data is", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("parse \'CreditPayment\'")]
        public virtual void ParseCreditPayment()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("parse \'CreditPayment\'", ((string[])(null)));
#line 50
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "OperationId",
                        "Note"});
            table7.AddRow(new string[] {
                        "Ref1",
                        "COMPTE INTERNE VISA : 17503879 ETAT DE DEPENSES NUMERO 336DATE VALEUR : 12/12/201" +
                            "6"});
#line 52
    testRunner.Given("I have read the following account operations from source of kind FortisCsvExport", ((string)(null)), table7, "Given ");
#line 56
 testRunner.When("I apply the cleanup transformation on unified operations", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "OperationId",
                        "ThirdParty",
                        "PatternName",
                        "Communication"});
            table8.AddRow(new string[] {
                        "Ref1",
                        "17503879",
                        "CreditPayment",
                        "ETAT DE DEPENSES NUMERO 336"});
#line 58
 testRunner.Then("the operations data is", ((string)(null)), table8, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("parse \'BankFees\'")]
        public virtual void ParseBankFees()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("parse \'BankFees\'", ((string[])(null)));
#line 63
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "OperationId",
                        "Note"});
            table9.AddRow(new string[] {
                        "Ref1",
                        "COMFORT PACK EXECUTE LE 06-02DATE VALEUR : 01/02/2017"});
#line 64
    testRunner.Given("I have read the following account operations from source of kind FortisCsvExport", ((string)(null)), table9, "Given ");
#line 68
 testRunner.When("I apply the cleanup transformation on unified operations", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "OperationId",
                        "ThirdParty",
                        "PatternName",
                        "Communication"});
            table10.AddRow(new string[] {
                        "Ref1",
                        "Fortis",
                        "BankFees",
                        "MONTHLY FEE COMFORT PACK"});
#line 70
 testRunner.Then("the operations data is", ((string)(null)), table10, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
