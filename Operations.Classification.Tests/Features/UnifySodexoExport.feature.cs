// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Operations.Classification.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Unify Sodexo Export details")]
    public partial class UnifySodexoExportDetailsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "UnifySodexoExport.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Unify Sodexo Export details", "\tIn order to classify my personal operations,\r\n\tI want a more structure operation" +
                    " detail for my sodexo transaction exports", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("parse \'BankTransfert\'")]
        public virtual void ParseBankTransfert()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("parse \'BankTransfert\'", ((string[])(null)));
#line 5
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "OperationId",
                        "Note"});
            table1.AddRow(new string[] {
                        "20170302-IN",
                        "Versement de 19 eLunch Pass d\'une valeur de 1.5 € de SELLIGENT"});
            table1.AddRow(new string[] {
                        "20170302-IN",
                        "Versement de 21 eLunch Pass d\'une valeur de 1.5 € de SELLIGENT"});
#line 6
 testRunner.Given("I have read the following account operations from source of kind SodexoCsvExport", ((string)(null)), table1, "Given ");
#line 11
 testRunner.When("I apply the cleanup transformation on unified operations", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "OperationId",
                        "ThirdParty",
                        "PatternName",
                        "Communication"});
            table2.AddRow(new string[] {
                        "20170302-IN",
                        "SELLIGENT",
                        "BankTransfert",
                        "Versement de 19 eLunch Pass d\'une valeur de 1.5 €"});
            table2.AddRow(new string[] {
                        "20170302-IN",
                        "SELLIGENT",
                        "BankTransfert",
                        "Versement de 21 eLunch Pass d\'une valeur de 1.5 €"});
#line 13
 testRunner.Then("the operations data is", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("parse \'CartPayment\'")]
        public virtual void ParseCartPayment()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("parse \'CartPayment\'", ((string[])(null)));
#line 18
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "OperationId",
                        "Note"});
            table3.AddRow(new string[] {
                        "20170224-128260098",
                        "Dépense CARREFOUR EXPRESS ETTERBEEK BRUXELLES (Transaction 128260098)"});
            table3.AddRow(new string[] {
                        "20170620-6038824",
                        "Dépense DELHAIZE LE LION / DE LEEUW LIEGE (Transaction 6038824)"});
#line 19
    testRunner.Given("I have read the following account operations from source of kind SodexoCsvExport", ((string)(null)), table3, "Given ");
#line 24
 testRunner.When("I apply the cleanup transformation on unified operations", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "OperationId",
                        "ThirdParty",
                        "City",
                        "PatternName"});
            table4.AddRow(new string[] {
                        "20170224-128260098",
                        "CARREFOUR EXPRESS ETTERBEEK",
                        "BRUXELLES",
                        "CartPayment"});
            table4.AddRow(new string[] {
                        "20170620-6038824",
                        "DELHAIZE LE LION / DE LEEUW",
                        "LIEGE",
                        "CartPayment"});
#line 26
    testRunner.Then("the operations data is", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
