// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

#region Designer generated code

using TechTalk.SpecFlow;

#pragma warning disable
namespace Operations.Classification.Tests.Features.Classification
{
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Unify Sodexo Export details")]
    public partial class UnifySodexoExportDetailsFeature
    {
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }

        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }

        private TechTalk.SpecFlow.ITestRunner testRunner;

        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            var featureInfo = new TechTalk.SpecFlow.FeatureInfo(
                new System.Globalization.CultureInfo("en-US"),
                "Unify Sodexo Export details",
                "\tIn order to classify my personal operations,\r\n\tI want a more structured operatio" +
                "n detail for my sodexo transaction exports",
                ProgrammingLanguage.CSharp,
                ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }

        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }

        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }

        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("parse \'BankTransfert\'")]
        public virtual void ParseBankTransfert()
        {
            var scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("parse \'BankTransfert\'", ((string[])(null)));
#line 5
            this.ScenarioSetup(scenarioInfo);
#line hidden
#line 6
            testRunner.Given(
                "I have read the following sodexo operations",
                "Date;Affilié;Amount\r\n02-03-2017;\"Versement de 19 eLunch Pass d\'une valeur de 1.1 " +
                "€ de SELLIGENT\";\"+ 1.1 €\"\r\n02-02-2017;\"Versement de 21 eLunch Pass d\'une valeur " +
                "de 1.1 € de SELLIGENT\";\"+ 1.1 €\"",
                ((TechTalk.SpecFlow.Table)(null)),
                "Given ");
#line 13
            testRunner.When("I unify and transform the read operations", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            var table1 = new TechTalk.SpecFlow.Table(
                new string[]
                {
                    "OperationId",
                    "ThirdParty",
                    "PatternName",
                    "Communication"
                });
            table1.AddRow(
                new string[]
                {
                    "20170302-IN",
                    "SELLIGENT",
                    "BankTransfert",
                    "Versement de 19 eLunch Pass d\'une valeur de 1.1 €"
                });
            table1.AddRow(
                new string[]
                {
                    "20170202-IN",
                    "SELLIGENT",
                    "BankTransfert",
                    "Versement de 21 eLunch Pass d\'une valeur de 1.1 €"
                });
#line 15
            testRunner.Then("the operations data is", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("parse \'CartPayment\'")]
        public virtual void ParseCartPayment()
        {
            var scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("parse \'CartPayment\'", ((string[])(null)));
#line 20
            this.ScenarioSetup(scenarioInfo);
#line hidden
#line 21
            testRunner.Given(
                "I have read the following sodexo operations",
                "Date;Affilié;Amount\r\n24-02-2017;\"Dépense CARREFOUR EXPRESS ETTERBEEK BRUXELLES (T" +
                "ransaction 128260098)\";\"- 11.11 €\"\r\n23-02-2017;\"Dépense DELHAIZE LE LION / DE LE" +
                "EUW LIEGE (Transaction 128074107)\";\"- 11.11 €\"",
                ((TechTalk.SpecFlow.Table)(null)),
                "Given ");
#line 28
            testRunner.When("I unify and transform the read operations", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            var table2 = new TechTalk.SpecFlow.Table(
                new string[]
                {
                    "OperationId",
                    "ThirdParty",
                    "City",
                    "PatternName"
                });
            table2.AddRow(
                new string[]
                {
                    "20170224-128260098",
                    "CARREFOUR EXPRESS ETTERBEEK",
                    "BRUXELLES",
                    "CartPayment"
                });
            table2.AddRow(
                new string[]
                {
                    "20170223-128074107",
                    "DELHAIZE LE LION / DE LEEUW",
                    "LIEGE",
                    "CartPayment"
                });
#line 30
            testRunner.Then("the operations data is", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore

#endregion