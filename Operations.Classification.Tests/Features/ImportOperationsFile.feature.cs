// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Operations.Classification.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Import operations file")]
    [NUnit.Framework.CategoryAttribute("UnitTest")]
    public partial class ImportOperationsFileFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ImportOperationsFile.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Import operations file", "\tBecause each import can be done with a potential mistake in the serialization\r\n\t" +
                    "I want to be able to replay the entire history with an eventual serialization se" +
                    "tting fix", ProgrammingLanguage.CSharp, new string[] {
                        "UnitTest"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("custom encoding is taken into account during import")]
        public virtual void CustomEncodingIsTakenIntoAccountDuringImport()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("custom encoding is taken into account during import", ((string[])(null)));
#line 7
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 8
 testRunner.Given("I have an operations file with the following \'windows-1252\' content", @"Numéro de séquence;Date d'exécution;Date valeur;Montant;Devise du compte;Détails;Numéro de compte
2017-0049;04/02/2017;04/02/2017;-1,11;EUR;AVEC LA CARTE 6703 04XX XXXX X315 7 BOUL - PAT PRIMO  BRUXELLES04-02-2017 DATE VALEUR : 04/02/2017;BE02275045085140", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 14
 testRunner.And("I have an empty operations repository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table1.AddRow(new string[] {
                        "SourceKind",
                        "FortisCsvExport"});
            table1.AddRow(new string[] {
                        "Encoding",
                        "UTF-8"});
#line 16
 testRunner.When("I import the operations file with following parameters", ((string)(null)), table1, "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "OperationId",
                        "ExecutionDate"});
#line 21
 testRunner.Then("the imported operation data is", ((string)(null)), table2, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table3.AddRow(new string[] {
                        "Encoding",
                        "windows-1252"});
#line 25
 testRunner.When("I change the last import command such that", ((string)(null)), table3, "When ");
#line 29
 testRunner.And("I replay the entire reflog of operations", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "OperationId",
                        "ExecutionDate"});
            table4.AddRow(new string[] {
                        "2017-0049",
                        "2017-02-04"});
#line 31
 testRunner.Then("the imported operation data is", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
