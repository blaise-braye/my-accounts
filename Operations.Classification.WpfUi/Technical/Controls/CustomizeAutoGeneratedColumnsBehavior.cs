using System;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Interactivity;
using Operations.Classification.WpfUi.Technical.Converters;

namespace Operations.Classification.WpfUi.Technical.Controls
{
    public class CustomizeAutoGeneratedColumnsBehavior : Behavior<DataGrid>
    {
        public static readonly DependencyProperty SortDescriptorsProperty = DependencyProperty.Register(
            "SortDescriptors",
            typeof(string),
            typeof(CustomizeAutoGeneratedColumnsBehavior),
            new PropertyMetadata(default(string)));

        public string SortDescriptors
        {
            get => (string)GetValue(SortDescriptorsProperty);
            set => SetValue(SortDescriptorsProperty, value);
        }

        protected override void OnAttached()
        {
            base.OnAttached();
            AssociatedObject.AutoGeneratingColumn += AssociatedObjectAutoGeneratingColumn;
        }

        protected override void OnDetaching()
        {
            AssociatedObject.AutoGeneratingColumn -= AssociatedObjectAutoGeneratingColumn;
            base.OnDetaching();
        }

        private void SetupSortDescriptor(DataGridColumn column, string propName)
        {
            if (!string.IsNullOrEmpty(SortDescriptors))
            {
                var descriptorList = SortDescriptors.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                foreach (var descriptor in descriptorList)
                {
                    var parts = descriptor.Split('-');
                    if (propName.Equals(parts[0], StringComparison.OrdinalIgnoreCase))
                    {
                        ListSortDirection? sortDirection = null;
                        if (parts.Length > 1)
                        {
                            var rawDir = parts[1];
                            if (rawDir.StartsWith("A", StringComparison.OrdinalIgnoreCase))
                            {
                                sortDirection = ListSortDirection.Ascending;
                            }
                            else if (rawDir.StartsWith("D", StringComparison.OrdinalIgnoreCase))
                            {
                                sortDirection = ListSortDirection.Descending;
                            }
                        }
                        else
                        {
                            sortDirection = ListSortDirection.Ascending;
                        }

                        if (sortDirection.HasValue)
                        {
                            column.SortDirection = sortDirection;
                        }
                    }
                }
            }
        }

        private void AssociatedObjectAutoGeneratingColumn(object sender, DataGridAutoGeneratingColumnEventArgs e)
        {
            var desc = e.PropertyDescriptor as PropertyDescriptor;
            var displayAttribute = desc?.Attributes[typeof(DisplayAttribute)] as DisplayAttribute;
            if (displayAttribute?.AutoGenerateField == false)
            {
                e.Cancel = true;
                return;
            }

            var boundColumn = e.Column as DataGridBoundColumn;
            var dtc = boundColumn as DataGridTextColumn;

            SetupSortDescriptor(e.Column, e.PropertyName);

            if (dtc != null)
            {
                if (desc?.Attributes[typeof(DisplayFormatAttribute)] is DisplayFormatAttribute displayFormatAttribute)
                {
                    var bindingBase = dtc.Binding;
                    var binding = bindingBase as Binding;
                    if (!string.IsNullOrEmpty(displayFormatAttribute.DataFormatString))
                    {
                        bindingBase.StringFormat = displayFormatAttribute.DataFormatString;
                        const string currencyFormat = ":C";
                        if (dtc.Binding.StringFormat.Contains(currencyFormat))
                        {
                            if (binding != null && binding.Converter == null)
                            {
                                binding.Converter = DefaultAmountValueConverter.Instance;
                            }
                        }
                    }

                    if (!string.IsNullOrEmpty(displayFormatAttribute.NullDisplayText))
                    {
                        bindingBase.TargetNullValue = displayFormatAttribute.NullDisplayText;
                    }
                }
            }
        }
    }
}