using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Interactivity;
using System.Windows.Media;

namespace Operations.Classification.WpfUi.Technical.Controls
{
    public class SetupDataGridContextMenuBehavior : Behavior<DataGrid>
    {
        protected override void OnAttached()
        {
            base.OnAttached();
            AssociatedObject.ContextMenuOpening += OnContextMenuOpening;
        }

        protected override void OnDetaching()
        {
            AssociatedObject.ContextMenuOpening -= OnContextMenuOpening;
            base.OnDetaching();
        }

        private void OnContextMenuOpening(object sender, ContextMenuEventArgs e)
        {
            if (AssociatedObject.ContextMenu == null)
            {
                e.Handled = true;
                return;
            }

            var clickedRow = MyVisualTreeHelper.GetVisualParent<DataGridRow>(e.OriginalSource);

            if (clickedRow == null)
            {
                // until I need to handle more than rows (headers...? cells...?)
                e.Handled = true;
                return;
            }

            var contextMenuItems = AssociatedObject.ContextMenu.Items.Cast<MenuItem>();
            SetupItems(contextMenuItems, clickedRow);
        }

        private void SetupItems(IEnumerable<MenuItem> menuItems, DataGridRow clickedRow)
        {
            foreach (var menuItem in menuItems)
            {
                menuItem.CommandParameter = clickedRow.DataContext;
                SetupItems(menuItem.Items.Cast<MenuItem>(), clickedRow);
            }
        }
    }

    public class MyVisualTreeHelper
    {
        public static T GetVisualParent<T>(object childObject) where T : Visual
        {
            var child = childObject as DependencyObject;
            while (child != null && !(child is T))
                child = VisualTreeHelper.GetParent(child);
            return child as T;
        }
    }

    public class CustomizeAutoGeneratedColumnsBehavior : Behavior<DataGrid>
    {
        protected override void OnAttached()
        {
            base.OnAttached();
            AssociatedObject.AutoGeneratingColumn += AssociatedObject_AutoGeneratingColumn;
        }

        protected override void OnDetaching()
        {
            AssociatedObject.AutoGeneratingColumn -= AssociatedObject_AutoGeneratingColumn;
            base.OnDetaching();
        }

        private void AssociatedObject_AutoGeneratingColumn(object sender, DataGridAutoGeneratingColumnEventArgs e)
        {
            var desc = e.PropertyDescriptor as PropertyDescriptor;
            var displayAttribute = desc?.Attributes[typeof(DisplayAttribute)] as DisplayAttribute;
            if (displayAttribute?.AutoGenerateField == false)
            {
                e.Cancel = true;
            }

            var boundColumn = e.Column as DataGridBoundColumn;
            var dtc = boundColumn as DataGridTextColumn;

            var displayFormatAttribute = desc?.Attributes[typeof(DisplayFormatAttribute)] as DisplayFormatAttribute;
            if (displayFormatAttribute != null)
            {
                if (dtc != null)
                {
                    if (!string.IsNullOrEmpty(displayFormatAttribute.DataFormatString))
                    {
                        dtc.Binding.StringFormat = displayFormatAttribute.DataFormatString;
                    }
                    if (!string.IsNullOrEmpty(displayFormatAttribute.NullDisplayText))
                    {
                        dtc.Binding.TargetNullValue = displayFormatAttribute.NullDisplayText;
                    }
                }
            }
        }
    }
}