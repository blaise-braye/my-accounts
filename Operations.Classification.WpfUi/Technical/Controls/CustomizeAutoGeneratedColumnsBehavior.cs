using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Interactivity;
using Operations.Classification.WpfUi.Technical.Converters;

namespace Operations.Classification.WpfUi.Technical.Controls
{
    public class CustomizeAutoGeneratedColumnsBehavior : Behavior<DataGrid>
    {
        protected override void OnAttached()
        {
            base.OnAttached();
            AssociatedObject.AutoGeneratingColumn += AssociatedObject_AutoGeneratingColumn;
        }

        protected override void OnDetaching()
        {
            AssociatedObject.AutoGeneratingColumn -= AssociatedObject_AutoGeneratingColumn;
            base.OnDetaching();
        }

        private void AssociatedObject_AutoGeneratingColumn(object sender, DataGridAutoGeneratingColumnEventArgs e)
        {
            var desc = e.PropertyDescriptor as PropertyDescriptor;
            var displayAttribute = desc?.Attributes[typeof(DisplayAttribute)] as DisplayAttribute;
            if (displayAttribute?.AutoGenerateField == false)
            {
                e.Cancel = true;
                return;
            }

            var boundColumn = e.Column as DataGridBoundColumn;
            var dtc = boundColumn as DataGridTextColumn;

            var displayFormatAttribute = desc?.Attributes[typeof(DisplayFormatAttribute)] as DisplayFormatAttribute;
            if (displayFormatAttribute != null)
            {
                if (dtc != null)
                {
                    var bindingBase = dtc.Binding;
                    var binding = bindingBase as Binding;
                    if (!string.IsNullOrEmpty(displayFormatAttribute.DataFormatString))
                    {
                        bindingBase.StringFormat = displayFormatAttribute.DataFormatString;
                        const string currencyFormat = ":C";
                        if (dtc.Binding.StringFormat.Contains(currencyFormat))
                        {
                            if (binding != null && binding.Converter == null)
                            {
                                binding.Converter = DefaultAmountValueConverter.Instance;
                            }
                        }
                    }
                    if (!string.IsNullOrEmpty(displayFormatAttribute.NullDisplayText))
                    {
                        bindingBase.TargetNullValue = displayFormatAttribute.NullDisplayText;
                    }
                }
            }
        }
    }
}