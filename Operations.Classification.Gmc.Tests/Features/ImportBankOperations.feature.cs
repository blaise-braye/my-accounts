// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Operations.Classification.Gmc.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ImportBankOperations")]
    [NUnit.Framework.CategoryAttribute("IntegrationTest")]
    public partial class ImportBankOperationsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ImportBankOperations.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ImportBankOperations", "\tUser must be able to import bank operations manually", ProgrammingLanguage.CSharp, new string[] {
                        "IntegrationTest"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
#line 6
 testRunner.Given("I connect on GererMesComptes with email \'Settings:GmcUserName\' and password \'Sett" +
                    "ings:GmcPassword\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 7
 testRunner.And("I create the bank account \'ScenarioContext:ScenarioInfo.Title\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Import an operation")]
        public virtual void ImportAnOperation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Import an operation", ((string[])(null)));
#line 9
this.ScenarioSetup(scenarioInfo);
#line 5
this.FeatureBackground();
#line hidden
#line 10
 testRunner.When("I import the qif data on account \'ScenarioContext:ScenarioInfo.Title\'", "!Type:Bank\r\nD11/04/2016\r\nT0.01\r\nMPARTENA - MUTUALITE LIBRE - BE74 2100 0818 2307 " +
                    "- BIC GEBABEBB - COMMUNICATION /C/ PAIE /0201733339803 DU 10/04/2017 POUR 001 PR" +
                    "ESTATIONS CHEZ M.BAYET BEN 0201733339803 711041707696 - BankTransfert\r\nN2017-014" +
                    "8\r\n^", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 19
  testRunner.Then("the last qif data import succeeded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Export imported operations")]
        public virtual void ExportImportedOperations()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Export imported operations", ((string[])(null)));
#line 21
this.ScenarioSetup(scenarioInfo);
#line 5
this.FeatureBackground();
#line hidden
#line 22
 testRunner.Given("I import the qif data on account \'ScenarioContext:ScenarioInfo.Title\'", @"!Type:Bank
D11/04/2016
T0.01
MData Too Long Is Truncated To 129 Bytes You Should Not Be Able To Read Something After triple letter ooooooooooooooooooooooo SSS while there is something as you can read it :)
N2017-0148
^
D09/28/2016
T0.02
Mdates must be formatted in mm/dd/yyyy
N2017-0148
^", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 37
 testRunner.When("I export the qif data from account \'ScenarioContext:ScenarioInfo.Title\', between " +
                    "\'2016-04-11T00:00:00\' and \'2016-11-05T00:00:00\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Date",
                        "Amount",
                        "Memo"});
            table1.AddRow(new string[] {
                        "",
                        "2016-11-04T00:00:00",
                        "0.01",
                        "Data Too Long Is Truncated To 129 Bytes You Should Not Be Able To Read Something " +
                            "After Triple Letter Ooooooooooooooooooooooo Sss"});
            table1.AddRow(new string[] {
                        "",
                        "2016-09-28T00:00:00",
                        "0.02",
                        "Dates Must Be Formatted In Mm Dd Yyyy"});
#line 39
 testRunner.Then("the last exported qif data are the following operations", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Execute two successive Imports")]
        public virtual void ExecuteTwoSuccessiveImports()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute two successive Imports", ((string[])(null)));
#line 44
this.ScenarioSetup(scenarioInfo);
#line 5
this.FeatureBackground();
#line hidden
#line 47
 testRunner.Given("I import the qif data on account \'ScenarioContext:ScenarioInfo.Title\'", "!Type:Bank\r\nD09/28/2016\r\nT0.01\r\nMA First Operation\r\nN2017-0148\r\n^\r\nD09/28/2016\r\nT" +
                    "0.02\r\nMA Second Operation\r\nN2017-0149\r\n^", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 61
 testRunner.And("I wait that last imported qifdata in account \'ScenarioContext:ScenarioInfo.Title\'" +
                    " is available in export", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 63
 testRunner.When("I import the qif data on account \'ScenarioContext:ScenarioInfo.Title\'", "!Type:Bank\r\nD09/28/2016\r\nT0.01\r\nMA First Operation\r\nN2017-0148\r\n^\r\nD09/28/2016\r\nT" +
                    "0.02\r\nMA Second Operation\r\nN2017-0149\r\n^\r\nD04/01/2016\r\nT0.02\r\nMA Third Operation" +
                    "\r\nN2017-0150\r\n^", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 83
 testRunner.And("I wait that last imported qifdata in account \'ScenarioContext:ScenarioInfo.Title\'" +
                    " is available in export", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 85
 testRunner.Then("the last qif data import succeeded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Date",
                        "Amount",
                        "Memo"});
            table2.AddRow(new string[] {
                        "",
                        "2016-09-28T00:00:00",
                        "0.01",
                        "A First Operation"});
            table2.AddRow(new string[] {
                        "",
                        "2016-09-28T00:00:00",
                        "0.02",
                        "A Second Operation"});
            table2.AddRow(new string[] {
                        "",
                        "2016-04-01T00:00:00",
                        "0.02",
                        "A Third Operation"});
#line 86
 testRunner.And("the last exported qif data are the following operations", ((string)(null)), table2, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Identify remote with new available qif data")]
        public virtual void IdentifyRemoteWithNewAvailableQifData()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identify remote with new available qif data", ((string[])(null)));
#line 93
this.ScenarioSetup(scenarioInfo);
#line 5
this.FeatureBackground();
#line hidden
#line 94
 testRunner.Given("I import the qif data on account \'ScenarioContext:ScenarioInfo.Title\'", "!Type:Bank\r\nD09/27/2013\r\nT1.00\r\nMUnchanged\r\n^\r\nD09/28/2013\r\nT0.01\r\nMRemove\r\n^\r\nD0" +
                    "9/29/2013\r\nT0.02\r\nMSome Memo\r\n^", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 111
 testRunner.And("I wait that last imported qifdata in account \'ScenarioContext:ScenarioInfo.Title\'" +
                    " is available in export", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 113
 testRunner.When("I apply a dry run for the available qif data to account \'ScenarioContext:Scenario" +
                    "Info.Title\'", "!Type:Bank\r\nD09/27/2013\r\nT1.00\r\nMUnchanged\r\n^\r\nD09/29/2013\r\nT0.02\r\nMUpdated Memo\r" +
                    "\n^\r\nD01/11/2014\r\nT0.01\r\nMAdded Memo\r\n^", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "DeltaKey",
                        "Action"});
            table3.AddRow(new string[] {
                        "2013-09-27$1.00",
                        "Nothing"});
            table3.AddRow(new string[] {
                        "2013-09-29$0.02",
                        "UpdateMemo"});
            table3.AddRow(new string[] {
                        "2014-01-11$0.01",
                        "Add"});
            table3.AddRow(new string[] {
                        "2013-09-28$0.01",
                        "Remove"});
#line 130
 testRunner.Then("the last dry run result produces the following delta report", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
